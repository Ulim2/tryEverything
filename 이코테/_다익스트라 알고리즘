# 다익스트라 알고리즘
import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

# 노드 갯수, 간선 갯수
n, m = map(int, input().split())
start = int(input())

# 각 노드에 연결되어 있는 노드에 대한 정보 리스트 
graph = [[] for i in range(n + 1)]

# 최단 거리 무한으로 초기화 
dis = [INF] * (n + 1)

# 모든 간선 정보 받기
for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b, c))

def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start))
    dis[start] = 0

    while q:
        d, now = heapq.heappop(q)
        # 최단 거리면 무시 
        if dis[now] < d:
            continue

        # 현재 노드와 연결된 다른 노드 확인
        for i in graph[now]:
            # 비용 = start에서 현재까지 노드 비용 + 현재에서 다른 노드 비용
            cost = d + i[1]
            
            if cost < dis[i[0]]:
                dis[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

dijkstra(start)

for i in range(1, n + 1):
    if dis[i] == INF:
        print('INF')
    else:
        print(dis[i])
